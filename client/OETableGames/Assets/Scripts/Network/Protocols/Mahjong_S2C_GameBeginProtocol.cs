//===================================================
//作    者：DRB
//创建时间：2021-04-05 20:52:24
//备    注：this code is generated by the tool
//===================================================
using System.Collections;
using System.Collections.Generic;
using System;
using System.IO;
using DrbFramework.Internal.Network;
using DrbFramework.Extensions;

/// <summary>
/// S2C_GameBegin
/// </summary>
public class Mahjong_S2C_GameBeginProto : IProto
{
    public int Code { get { return 30001; } }

    public int roomId; //
    public int status; //
    public int gamesCount; //
    public List<int> dicePosList; //
    public List<int> dicesList; //
    public int pokerAmount; //
    public int pokerTotal; //
    public Poker luckPoker; //
    public List<Seat> seatList; //

    /// <summary>
    /// 
    /// </summary>
    public class Poker
    {
        public int index; //
        public int color; //
        public int size; //
        public int pos; //
        public Poker()
        {
        }

        public Poker(byte[] bytes)
        {
            Deserialize(bytes);
        }

        public byte[] Serialize()
        {
            using (MemoryStream ms = new MemoryStream())
            {
                ms.WriteInt(index);
                ms.WriteInt(color);
                ms.WriteInt(size);
                ms.WriteInt(pos);
                return ms.ToArray();
            }
        }

        public void Deserialize(byte[] buffer)
        {
            if (buffer == null) return;
            using (MemoryStream ms = new MemoryStream(buffer))
            {
                index = ms.ReadInt();
                color = ms.ReadInt();
                size = ms.ReadInt();
                pos = ms.ReadInt();
            }
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public class Seat
    {
        public bool isBanker; //
        public int playerId; //
        public int pos; //
        public int handCount; //
        public int pokerAmount; //
        public int gold; //
        public Poker hitPoker; //
        public List<Poker> pokersList; //
        public List<Poker> universalPokerList; //
        public Seat()
        {
        }

        public Seat(byte[] bytes)
        {
            Deserialize(bytes);
        }

        public byte[] Serialize()
        {
            using (MemoryStream ms = new MemoryStream())
            {
                ms.WriteBool(isBanker);
                ms.WriteInt(playerId);
                ms.WriteInt(pos);
                ms.WriteInt(handCount);
                ms.WriteInt(pokerAmount);
                ms.WriteInt(gold);
                if(hitPoker != null)
                {
                    ms.WriteBytes(hitPoker.Serialize());
                }
                else
                {
                    ms.WriteInt(0);
                }
                ms.WriteUShort((ushort)(pokersList == null?0:pokersList.Count));
                if(pokersList != null)
                {
                    for (int i = 0; i < pokersList.Count; ++i)
                    {
                        if(pokersList[i] != null)
                        {
                            ms.WriteBytes(pokersList[i].Serialize());
                        }
                        else
                        {
                            ms.WriteInt(0);
                        }
                    }
                }
                ms.WriteUShort((ushort)(universalPokerList == null?0:universalPokerList.Count));
                if(universalPokerList != null)
                {
                    for (int i = 0; i < universalPokerList.Count; ++i)
                    {
                        if(universalPokerList[i] != null)
                        {
                            ms.WriteBytes(universalPokerList[i].Serialize());
                        }
                        else
                        {
                            ms.WriteInt(0);
                        }
                    }
                }
                return ms.ToArray();
            }
        }

        public void Deserialize(byte[] buffer)
        {
            if (buffer == null) return;
            using (MemoryStream ms = new MemoryStream(buffer))
            {
                isBanker = ms.ReadBool();
                playerId = ms.ReadInt();
                pos = ms.ReadInt();
                handCount = ms.ReadInt();
                pokerAmount = ms.ReadInt();
                gold = ms.ReadInt();
                hitPoker = new Poker(ms.ReadBytes());
                ushort pokersListLength = ms.ReadUShort();
                pokersList = new List<Poker>();
                for (int i = 0; i < pokersListLength; ++i)
                {
                    pokersList.Add(new Poker(ms.ReadBytes()));
                }
                ushort universalPokerListLength = ms.ReadUShort();
                universalPokerList = new List<Poker>();
                for (int i = 0; i < universalPokerListLength; ++i)
                {
                    universalPokerList.Add(new Poker(ms.ReadBytes()));
                }
            }
        }
    }

    public Mahjong_S2C_GameBeginProto()
    {
    }

    public Mahjong_S2C_GameBeginProto(byte[] bytes)
    {
        Deserialize(bytes);
    }

    public byte[] Serialize()
    {
        using (MemoryStream ms = new MemoryStream())
        {
            ms.WriteInt(Code);
            ms.WriteInt(roomId);
            ms.WriteInt(status);
            ms.WriteInt(gamesCount);
            ms.WriteUShort((ushort)(dicePosList == null?0:dicePosList.Count));
            if(dicePosList != null)
            {
                for (int i = 0; i < dicePosList.Count; ++i)
                {
                    ms.WriteInt(dicePosList[i]);
                }
            }
            ms.WriteUShort((ushort)(dicesList == null?0:dicesList.Count));
            if(dicesList != null)
            {
                for (int i = 0; i < dicesList.Count; ++i)
                {
                    ms.WriteInt(dicesList[i]);
                }
            }
            ms.WriteInt(pokerAmount);
            ms.WriteInt(pokerTotal);
            if(luckPoker != null)
            {
                ms.WriteBytes(luckPoker.Serialize());
            }
            else
            {
                ms.WriteInt(0);
            }
            ms.WriteUShort((ushort)(seatList == null?0:seatList.Count));
            if(seatList != null)
            {
                for (int i = 0; i < seatList.Count; ++i)
                {
                    if(seatList[i] != null)
                    {
                        ms.WriteBytes(seatList[i].Serialize());
                    }
                    else
                    {
                        ms.WriteInt(0);
                    }
                }
            }
            return ms.ToArray();
        }
    }

    public void Deserialize(byte[] buffer)
    {
        if (buffer == null) return;
        using (MemoryStream ms = new MemoryStream(buffer))
        {
            roomId = ms.ReadInt();
            status = ms.ReadInt();
            gamesCount = ms.ReadInt();
            ushort dicePosListLength = ms.ReadUShort();
            dicePosList = new List<int>();
            for (int i = 0; i < dicePosListLength; ++i)
            {
                dicePosList.Add(ms.ReadInt());
            }
            ushort dicesListLength = ms.ReadUShort();
            dicesList = new List<int>();
            for (int i = 0; i < dicesListLength; ++i)
            {
                dicesList.Add(ms.ReadInt());
            }
            pokerAmount = ms.ReadInt();
            pokerTotal = ms.ReadInt();
            luckPoker = new Poker(ms.ReadBytes());
            ushort seatListLength = ms.ReadUShort();
            seatList = new List<Seat>();
            for (int i = 0; i < seatListLength; ++i)
            {
                seatList.Add(new Seat(ms.ReadBytes()));
            }
        }
    }
}
