//===================================================
//作    者：DRB
//创建时间：2021-04-23 08:04:28
//备    注：this code is generated by the tool
//===================================================
using System.Collections;
using System.Collections.Generic;
using System;
using System.IO;
using DrbFramework.Internal.Network;
using DrbFramework.Extensions;

/// <summary>
/// S2C_GameBegin
/// </summary>
public class Mahjong_S2C_GameBeginProto : IProto
{
    public int Code { get { return 30001; } }

    public int roomId; //
    public int status; //
    public int gamesCount; //
    public List<int> dicePosList; //
    public List<int> dicesList; //
    public int mahjongAmount; //
    public int mahjongTotal; //
    public List<Seat> seatList; //

    /// <summary>
    /// 
    /// </summary>
    public class Seat
    {
        public bool isBanker; //
        public int playerId; //
        public int pos; //
        public int handCount; //
        public int mahjongAmount; //
        public int gold; //
        public Mahjong hitMahjong; //
        public List<Mahjong> mahjongsList; //
        public List<Mahjong> universalMahjongsList; //
        public Seat()
        {
        }

        public Seat(byte[] bytes)
        {
            Deserialize(bytes);
        }

        public byte[] Serialize()
        {
            using (MemoryStream ms = new MemoryStream())
            {
                ms.WriteBool(isBanker);
                ms.WriteInt(playerId);
                ms.WriteInt(pos);
                ms.WriteInt(handCount);
                ms.WriteInt(mahjongAmount);
                ms.WriteInt(gold);
                if(hitMahjong != null)
                {
                    ms.WriteBytes(hitMahjong.Serialize());
                }
                else
                {
                    ms.WriteInt(0);
                }
                ms.WriteUShort((ushort)(mahjongsList == null?0:mahjongsList.Count));
                if(mahjongsList != null)
                {
                    for (int i = 0; i < mahjongsList.Count; ++i)
                    {
                        if(mahjongsList[i] != null)
                        {
                            ms.WriteBytes(mahjongsList[i].Serialize());
                        }
                        else
                        {
                            ms.WriteInt(0);
                        }
                    }
                }
                ms.WriteUShort((ushort)(universalMahjongsList == null?0:universalMahjongsList.Count));
                if(universalMahjongsList != null)
                {
                    for (int i = 0; i < universalMahjongsList.Count; ++i)
                    {
                        if(universalMahjongsList[i] != null)
                        {
                            ms.WriteBytes(universalMahjongsList[i].Serialize());
                        }
                        else
                        {
                            ms.WriteInt(0);
                        }
                    }
                }
                return ms.ToArray();
            }
        }

        public void Deserialize(byte[] buffer)
        {
            if (buffer == null) return;
            using (MemoryStream ms = new MemoryStream(buffer))
            {
                isBanker = ms.ReadBool();
                playerId = ms.ReadInt();
                pos = ms.ReadInt();
                handCount = ms.ReadInt();
                mahjongAmount = ms.ReadInt();
                gold = ms.ReadInt();
                byte[] hitMahjongBytes = ms.ReadBytes();
                if(hitMahjongBytes != null) hitMahjong = new Mahjong(ms.ReadBytes());
                ushort mahjongsListLength = ms.ReadUShort();
                mahjongsList = new List<Mahjong>();
                for (int i = 0; i < mahjongsListLength; ++i)
                {
                    byte[] mahjongsBytes = ms.ReadBytes();
                    if(mahjongsBytes != null) mahjongsList.Add(new Mahjong(mahjongsBytes));
                }
                ushort universalMahjongsListLength = ms.ReadUShort();
                universalMahjongsList = new List<Mahjong>();
                for (int i = 0; i < universalMahjongsListLength; ++i)
                {
                    byte[] universalMahjongsBytes = ms.ReadBytes();
                    if(universalMahjongsBytes != null) universalMahjongsList.Add(new Mahjong(universalMahjongsBytes));
                }
            }
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public class Mahjong
    {
        public int index; //
        public int color; //
        public int number; //
        public int pos; //
        public Mahjong()
        {
        }

        public Mahjong(byte[] bytes)
        {
            Deserialize(bytes);
        }

        public byte[] Serialize()
        {
            using (MemoryStream ms = new MemoryStream())
            {
                ms.WriteInt(index);
                ms.WriteInt(color);
                ms.WriteInt(number);
                ms.WriteInt(pos);
                return ms.ToArray();
            }
        }

        public void Deserialize(byte[] buffer)
        {
            if (buffer == null) return;
            using (MemoryStream ms = new MemoryStream(buffer))
            {
                index = ms.ReadInt();
                color = ms.ReadInt();
                number = ms.ReadInt();
                pos = ms.ReadInt();
            }
        }
    }

    public Mahjong_S2C_GameBeginProto()
    {
    }

    public Mahjong_S2C_GameBeginProto(byte[] bytes)
    {
        Deserialize(bytes);
    }

    public byte[] Serialize()
    {
        using (MemoryStream ms = new MemoryStream())
        {
            ms.WriteInt(Code);
            ms.WriteInt(roomId);
            ms.WriteInt(status);
            ms.WriteInt(gamesCount);
            ms.WriteUShort((ushort)(dicePosList == null?0:dicePosList.Count));
            if(dicePosList != null)
            {
                for (int i = 0; i < dicePosList.Count; ++i)
                {
                    ms.WriteInt(dicePosList[i]);
                }
            }
            ms.WriteUShort((ushort)(dicesList == null?0:dicesList.Count));
            if(dicesList != null)
            {
                for (int i = 0; i < dicesList.Count; ++i)
                {
                    ms.WriteInt(dicesList[i]);
                }
            }
            ms.WriteInt(mahjongAmount);
            ms.WriteInt(mahjongTotal);
            ms.WriteUShort((ushort)(seatList == null?0:seatList.Count));
            if(seatList != null)
            {
                for (int i = 0; i < seatList.Count; ++i)
                {
                    if(seatList[i] != null)
                    {
                        ms.WriteBytes(seatList[i].Serialize());
                    }
                    else
                    {
                        ms.WriteInt(0);
                    }
                }
            }
            return ms.ToArray();
        }
    }

    public void Deserialize(byte[] buffer)
    {
        if (buffer == null) return;
        using (MemoryStream ms = new MemoryStream(buffer))
        {
            roomId = ms.ReadInt();
            status = ms.ReadInt();
            gamesCount = ms.ReadInt();
            ushort dicePosListLength = ms.ReadUShort();
            dicePosList = new List<int>();
            for (int i = 0; i < dicePosListLength; ++i)
            {
                dicePosList.Add(ms.ReadInt());
            }
            ushort dicesListLength = ms.ReadUShort();
            dicesList = new List<int>();
            for (int i = 0; i < dicesListLength; ++i)
            {
                dicesList.Add(ms.ReadInt());
            }
            mahjongAmount = ms.ReadInt();
            mahjongTotal = ms.ReadInt();
            ushort seatListLength = ms.ReadUShort();
            seatList = new List<Seat>();
            for (int i = 0; i < seatListLength; ++i)
            {
                byte[] seatBytes = ms.ReadBytes();
                if(seatBytes != null) seatList.Add(new Seat(seatBytes));
            }
        }
    }
}
